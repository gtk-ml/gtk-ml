; define an intrinsical operator
(define-intrinsic (intr-add a b)
  (compile-expr CTX CODE-BUILDER BASIC-BLOCK b)
  (compile-expr CTX CODE-BUILDER BASIC-BLOCK a)
  (emit-bytecode CTX CODE-BUILDER BASIC-BLOCK cond-none :add))

; define a Window macro
(define-macro (Window title width height)
  `(lambda (app)
    (new-window app ,title ,width ,height)))

; run the application
(Application "de.walterpi.example" flags-none {
  :activate (Window
    "gtk-ml example"
    (cond
      #f          (error {:err 'cond-error :desc "cond evaluated in an incorrect way"})
      (cmp 0 1 2) (error {:err 'cond-error :desc "cond evaluated in an incorrect way"})
      :else       640)
    (do 0 (intr-add 240 240)))})
